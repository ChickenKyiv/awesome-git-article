When I have a feeling that the developer gets used to coding at one repository.
I start to make his life a bit harder.
That feeling it's easy to measure, actually - if the student is able to close a few tasks per day, able to refactor code, fix @TODOs, create tests for his methods and doing it without big stress.

For example, I'm not accepting his PR ASAP. Sometimes I ask for creating some additional changes rewrite a piece of code, split it into a few methods, add information at Readme.
It helps with discipline. At work it's a pretty common situation --> your code can be not perfect, but you actually feeling like you finish it and ready to move on. When you finish it and ready to move on.
When you hear - "Please update it" --> you may feel upset.
This uphills and downsides helping you to master critical thinking at the development process.
It helps to understand, that quickly is not equal to better, because if you did something poorly --> you'll be asked to rewrite your code.

For sure, code sometimes generates issues, that not easy to catch. Then it's helpful to have Travis CI & CodeClimate, ESLint helps me --> errors prevent me from merging PRs by approving it. And then I forced to ask for changes, so checks at all additional tools will pass green.

But I need to remember, that Travis CI works well only when we have good test coverage. Without tests, only most hard errors, that crash builds --> will be shown with error logs.
